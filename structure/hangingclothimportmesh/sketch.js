var mesh = [ [237.9,134,284.7,224.2], [244.6,123.9,278,214.2], [251.3,113.9,271.3,204.2], [258,103.9,264.6,194.1], [264.6,93.9,258,184.1], [271.3,83.8,251.3,174.1], [278,73.8,244.6,164.1], [284.7,63.8,237.9,154], [237.9,154,284.7,63.8], [244.6,164.1,278,73.8], [251.3,174.1,271.3,83.8], [258,184.1,264.6,93.9], [264.6,194.1,258,103.9], [271.3,204.2,251.3,113.9], [278,214.2,244.6,123.9], [284.7,224.2,237.9,134], [64.1,134,17.3,224.2], [57.4,123.9,24,214.2], [50.7,113.9,30.7,204.2], [44,103.9,37.4,194.1], [37.4,93.9,44,184.1], [30.7,83.8,50.7,174.1], [24,73.8,57.4,164.1], [17.3,63.8,64.1,154], [64.1,154,17.3,63.8], [57.4,164.1,24,73.8], [50.7,174.1,30.7,83.8], [44,184.1,37.4,93.9], [37.4,194.1,44,103.9], [30.7,204.2,50.7,113.9], [24,214.2,57.4,123.9], [17.3,224.2,64.1,134], [141,230.9,231.2,277.7], [130.9,237.6,221.2,271], [120.9,244.3,211.2,264.3], [110.9,251,201.1,257.6], [100.9,257.6,191.1,251], [90.8,264.3,181.1,244.3], [80.8,271,171.1,237.6], [70.8,277.7,161,230.9], [161,230.9,70.8,277.7], [171.1,237.6,80.8,271], [181.1,244.3,90.8,264.3], [191.1,251,100.9,257.6], [201.1,257.6,110.9,251], [211.2,264.3,120.9,244.3], [221.2,271,130.9,237.6], [231.2,277.7,141,230.9], [151,204.2,57.4,164.1], [151,214.2,64.1,154], [151,63.8,70.8,10.3], [151,63.8,231.2,10.3], [231.2,144,284.7,63.8], [231.2,144,284.7,224.2], [151,144,231.2,144], [151,144,151,63.8], [151,144,284.7,63.8], [151,134,278,73.8], [151,123.9,271.3,83.8], [151,113.9,264.6,93.9], [151,103.9,258,103.9], [151,93.9,251.3,113.9], [151,83.8,244.6,123.9], [151,73.8,237.9,134], [151,63.8,231.2,144], [151,144,231.2,10.3], [161,144,221.2,17], [171.1,144,211.2,23.7], [181.1,144,201.1,30.4], [191.1,144,191.1,37], [201.1,144,181.1,43.7], [211.2,144,171.1,50.4], [221.2,144,161,57.1], [231.2,144,151,63.8], [141,57.1,231.2,10.3], [130.9,50.4,221.2,17], [120.9,43.7,211.2,23.7], [110.9,37,201.1,30.4], [100.9,30.4,191.1,37], [90.8,23.7,181.1,43.7], [80.8,17,171.1,50.4], [70.8,10.3,161,57.1], [70.8,144,17.3,63.8], [70.8,144,17.3,224.2], [151,224.2,70.8,277.7], [151,224.2,231.2,277.7], [151,144,151,224.2], [151,144,70.8,144], [151,144,70.8,277.7], [141,144,80.8,271], [130.9,144,90.8,264.3], [120.9,144,100.9,257.6], [110.9,144,110.9,251], [100.9,144,120.9,244.3], [90.8,144,130.9,237.6], [80.8,144,141,230.9], [70.8,144,151,224.2], [151,144,17.3,224.2], [151,154,24,214.2], [151,164.1,30.7,204.2], [151,174.1,37.4,194.1], [151,184.1,44,184.1], [151,194.1,50.7,174.1], [151,224.2,70.8,144], [151,144,70.8,10.3], [141,144,80.8,17], [130.9,144,90.8,23.7], [120.9,144,100.9,30.4], [110.9,144,110.9,37], [100.9,144,120.9,43.7], [90.8,144,130.9,50.4], [80.8,144,141,57.1], [70.8,144,151,63.8], [151,144,17.3,63.8], [151,134,24,73.8], [151,123.9,30.7,83.8], [151,113.9,37.4,93.9], [151,103.9,44,103.9], [151,93.9,50.7,113.9], [151,83.8,57.4,123.9], [151,73.8,64.1,134], [161,57.1,70.8,10.3], [171.1,50.4,80.8,17], [181.1,43.7,90.8,23.7], [191.1,37,100.9,30.4], [201.1,30.4,110.9,37], [211.2,23.7,120.9,43.7], [221.2,17,130.9,50.4], [231.2,10.3,141,57.1], [151,63.8,70.8,144], [151,144,284.7,224.2], [151,154,278,214.2], [151,164.1,271.3,204.2], [151,174.1,264.6,194.1], [151,184.1,258,184.1], [151,194.1,251.3,174.1], [151,204.2,244.6,164.1], [151,214.2,237.9,154], [151,224.2,231.2,144], [151,144,231.2,277.7], [161,144,221.2,271], [171.1,144,211.2,264.3], [181.1,144,201.1,257.6], [191.1,144,191.1,251], [201.1,144,181.1,244.3], [211.2,144,171.1,237.6], [221.2,144,161,230.9], [231.2,144,151,224.2] ];


// Aatish Bhatia 01/16/2016 (@aatishb)
// Adapted from Dan Shiffman's Nature of Code
// http://natureofcode.com/book/chapter-5-physics-libraries/
// https://github.com/shiffman/The-Nature-of-Code-Examples-p5.js

// Reference to physics world
var physics;

var particles = [];
var springs = [];
var stiffness = 0.2;

var points = [];
var lines = [];

function setup() {
  createCanvas(640,360);

  // Initialize the physics
  physics=new VerletPhysics2D();
  physics.addBehavior(new GravityBehavior(new Vec2D(0,0.5)));

  // Set the world's bounding box
  physics.setWorldBounds(new Rect(0,0,width,height));
  
  // Make particles
  for(var i = 0; i<mesh.length; i++){

    var x1 = mesh[i][0]+150;
    var y1 = mesh[i][1];
    var x2 = mesh[i][2]+150;
    var y2 = mesh[i][3];

    // Check if particle already exists at that location
    if (points.indexOf(str(x1)+':'+str(y1)) < 0) {
      // If not, create the particle
      particles.push(new Particle(new Vec2D(x1,y1)));
      // Anything we make, we have to add into the physics world
      physics.addParticle(particles.slice(-1)[0]);
      // Index new particles by their location
      points.push(str(x1)+':'+str(y1));
    }

    if (points.indexOf(str(x2)+':'+str(y2)) < 0) {
      particles.push(new Particle(new Vec2D(x2,y2)));
      physics.addParticle(particles.slice(-1)[0]);
      points.push(str(x2)+':'+str(y2));
    }

    var i1 = points.indexOf(str(x1)+':'+str(y1));
    var i2 = points.indexOf(str(x2)+':'+str(y2));


    //particles[i1].lock();
    //particles[i2].lock();

    // Make a spring connecting both Particles
    springs.push(new VerletSpring2D(particles[i1],particles[i2],dist(x1,y1,x2,y2),stiffness));
    physics.addSpring(springs.slice(-1)[0]);
    //line(x1,y1,x2,y2);
    lines.push([x1,y1,x2,y2]);
  }

  // Lock corners in place
  //particles[0].lock();
  //particles[cloth_particles_wide-1][0].lock();

  //print(points.slice(-1)[0]);
  //print(points.indexOf(str(301)+':'+str(194.1)));
}

function draw() {

  // Update the physics world
  physics.update();

  background(51);

  // This next bit draws lines between the particles
  stroke(200);
  strokeWeight(2);

  for(var i=0; i<lines.length; i++){

    var x1 = lines[i][0];
    var y1 = lines[i][1];
    var x2 = lines[i][2];
    var y2 = lines[i][3];
    
    var i1 = points.indexOf(str(x1)+':'+str(y1));
    var i2 = points.indexOf(str(x2)+':'+str(y2));

    //print(i1,i2);
    line(particles[i1].x,particles[i1].y,particles[i2].x,particles[i2].y);
  
  
  }

}
  

 
